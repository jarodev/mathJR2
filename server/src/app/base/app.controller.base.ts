/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AppService } from "../app.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AppCreateInput } from "./AppCreateInput";
import { AppWhereInput } from "./AppWhereInput";
import { AppWhereUniqueInput } from "./AppWhereUniqueInput";
import { AppFindManyArgs } from "./AppFindManyArgs";
import { AppUpdateInput } from "./AppUpdateInput";
import { App } from "./App";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { CategoryFindManyArgs } from "../../category/base/CategoryFindManyArgs";
import { Category } from "../../category/base/Category";
import { CategoryWhereUniqueInput } from "../../category/base/CategoryWhereUniqueInput";
import { GradeFindManyArgs } from "../../grade/base/GradeFindManyArgs";
import { Grade } from "../../grade/base/Grade";
import { GradeWhereUniqueInput } from "../../grade/base/GradeWhereUniqueInput";
import { TagFindManyArgs } from "../../tag/base/TagFindManyArgs";
import { Tag } from "../../tag/base/Tag";
import { TagWhereUniqueInput } from "../../tag/base/TagWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AppControllerBase {
  constructor(
    protected readonly service: AppService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "App",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: App })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: AppCreateInput): Promise<App> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "App",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [App] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(AppFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<App[]> {
    const args = plainToClass(AppFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "App",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: App })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: AppWhereUniqueInput
  ): Promise<App | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: App })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() data: AppUpdateInput
  ): Promise<App | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: App })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: AppWhereUniqueInput
  ): Promise<App | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/appAdmins")
  @ApiNestedQuery(UserFindManyArgs)
  async findManyAppAdmins(
    @common.Req() request: Request,
    @common.Param() params: AppWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findAppAdmins(params.id, {
      ...query,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/appAdmins")
  async connectAppAdmins(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appAdmins: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/appAdmins")
  async updateAppAdmins(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appAdmins: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/appAdmins")
  async disconnectAppAdmins(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appAdmins: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/categories")
  @ApiNestedQuery(CategoryFindManyArgs)
  async findManyCategories(
    @common.Req() request: Request,
    @common.Param() params: AppWhereUniqueInput
  ): Promise<Category[]> {
    const query = plainToClass(CategoryFindManyArgs, request.query);
    const results = await this.service.findCategories(params.id, {
      ...query,
      select: {
        app: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/categories")
  async connectCategories(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: CategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categories: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/categories")
  async updateCategories(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: CategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categories: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/categories")
  async disconnectCategories(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: CategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categories: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Grade",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/grades")
  @ApiNestedQuery(GradeFindManyArgs)
  async findManyGrades(
    @common.Req() request: Request,
    @common.Param() params: AppWhereUniqueInput
  ): Promise<Grade[]> {
    const query = plainToClass(GradeFindManyArgs, request.query);
    const results = await this.service.findGrades(params.id, {
      ...query,
      select: {
        app: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/grades")
  async connectGrades(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: GradeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      grades: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/grades")
  async updateGrades(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: GradeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      grades: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/grades")
  async disconnectGrades(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: GradeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      grades: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Tag",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/tags")
  @ApiNestedQuery(TagFindManyArgs)
  async findManyTags(
    @common.Req() request: Request,
    @common.Param() params: AppWhereUniqueInput
  ): Promise<Tag[]> {
    const query = plainToClass(TagFindManyArgs, request.query);
    const results = await this.service.findTags(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/tags")
  async connectTags(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/tags")
  async updateTags(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "App",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/tags")
  async disconnectTags(
    @common.Param() params: AppWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
